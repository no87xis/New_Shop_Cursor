"""
API endpoints –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤
"""
from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from typing import List, Optional
import logging
import random
from datetime import datetime, timedelta

from app.db import get_db
from app.models.product import Product
from app.models.order import Order, OrderItem
from app.models.cart import CartItem
from app.schemas.order import OrderCreate, OrderItemCreate
from app.services.whatsapp_service import whatsapp_service

logger = logging.getLogger(__name__)
router = APIRouter(prefix="/api/admin/test-orders", tags=["test-orders"])

@router.post("/create-random")
async def create_random_test_order(
    customer_name: Optional[str] = None,
    customer_phone: Optional[str] = None,
    items_count: int = 3,
    db: Session = Depends(get_db)
):
    """
    –°–æ–∑–¥–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
        products = db.query(Product).filter(
            Product.availability_status == "IN_STOCK",
            Product.quantity > 0
        ).all()
        
        if not products:
            raise HTTPException(status_code=400, detail="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∑–∞–∫–∞–∑–∞")
        
        # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã
        selected_products = random.sample(products, min(items_count, len(products)))
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞ –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã
        if not customer_name:
            customer_name = f"–¢–µ—Å—Ç–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç {random.randint(1, 1000)}"
        
        if not customer_phone:
            customer_phone = f"+37529{random.randint(1000000, 9999999)}"
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        order_data = OrderCreate(
            customer_name=customer_name,
            customer_phone=customer_phone,
            customer_email=f"test{random.randint(1, 1000)}@example.com",
            delivery_address=f"–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å {random.randint(1, 100)}",
            notes=f"–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω {datetime.now().strftime('%Y-%m-%d %H:%M')}",
            status="PENDING"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        order = Order(
            customer_name=order_data.customer_name,
            customer_phone=order_data.customer_phone,
            customer_email=order_data.customer_email,
            delivery_address=order_data.delivery_address,
            notes=order_data.notes,
            status=order_data.status,
            total_amount=0,
            created_at=datetime.now()
        )
        
        db.add(order)
        db.flush()  # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–∫–∞–∑–∞
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –∑–∞–∫–∞–∑
        total_amount = 0
        for product in selected_products:
            quantity = random.randint(1, min(3, product.quantity))
            item_price = float(product.sell_price_rub or 0) * quantity
            
            order_item = OrderItem(
                order_id=order.id,
                product_id=product.id,
                quantity=quantity,
                price=product.sell_price_rub,
                total_price=item_price
            )
            
            db.add(order_item)
            total_amount += item_price
            
            # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ
            product.quantity -= quantity
            if product.quantity <= 0:
                product.availability_status = "OUT_OF_STOCK"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É –∑–∞–∫–∞–∑–∞
        order.total_amount = total_amount
        db.commit()
        db.refresh(order)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ WhatsApp
        try:
            message = f"""üõçÔ∏è –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order.id}

üë§ –ö–ª–∏–µ–Ω—Ç: {order.customer_name}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order.customer_phone}
üìç –ê–¥—Ä–µ—Å: {order.delivery_address}

üì¶ –¢–æ–≤–∞—Ä—ã:
"""
            for item in order.items:
                message += f"‚Ä¢ {item.product.name} x{item.quantity} = {item.total_price:.0f} ‚ÇΩ\n"
            
            message += f"""
üí∞ –û–±—â–∞—è —Å—É–º–º–∞: {order.total_amount:.0f} ‚ÇΩ
üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏—è: {order.notes or '–ù–µ—Ç'}
‚è∞ –í—Ä–µ–º—è: {order.created_at.strftime('%Y-%m-%d %H:%M')}

–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã."""
            
            await whatsapp_service.send_notification(
                phone=order.customer_phone,
                message=message
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ WhatsApp —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
        
        return {
            "success": True,
            "message": "–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω",
            "order_id": order.id,
            "customer_name": order.customer_name,
            "customer_phone": order.customer_phone,
            "total_amount": order.total_amount,
            "items_count": len(selected_products)
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞: {e}")
        db.rollback()
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")

@router.post("/create-from-cart")
async def create_test_order_from_cart(
    customer_name: str,
    customer_phone: str,
    delivery_address: str,
    customer_email: Optional[str] = None,
    notes: Optional[str] = None,
    db: Session = Depends(get_db)
):
    """
    –°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–æ—Ä–∑–∏–Ω—ã
    """
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ
        cart_items = db.query(CartItem).all()
        
        if not cart_items:
            raise HTTPException(status_code=400, detail="–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑
        order = Order(
            customer_name=customer_name,
            customer_phone=customer_phone,
            customer_email=customer_email or f"test{random.randint(1, 1000)}@example.com",
            delivery_address=delivery_address,
            notes=notes or "–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã",
            status="PENDING",
            total_amount=0,
            created_at=datetime.now()
        )
        
        db.add(order)
        db.flush()
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –≤ –∑–∞–∫–∞–∑
        total_amount = 0
        for cart_item in cart_items:
            if cart_item.product.quantity >= cart_item.quantity:
                order_item = OrderItem(
                    order_id=order.id,
                    product_id=cart_item.product_id,
                    quantity=cart_item.quantity,
                    price=cart_item.product.sell_price_rub,
                    total_price=float(cart_item.product.sell_price_rub or 0) * cart_item.quantity
                )
                
                db.add(order_item)
                total_amount += order_item.total_price
                
                # –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞
                cart_item.product.quantity -= cart_item.quantity
                if cart_item.product.quantity <= 0:
                    cart_item.product.availability_status = "OUT_OF_STOCK"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—É–º–º—É
        order.total_amount = total_amount
        db.commit()
        db.refresh(order)
        
        # –û—á–∏—â–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
        db.query(CartItem).delete()
        db.commit()
        
        return {
            "success": True,
            "message": "–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã —Å–æ–∑–¥–∞–Ω",
            "order_id": order.id,
            "total_amount": order.total_amount,
            "items_count": len(cart_items)
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã: {e}")
        db.rollback()
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞: {e}")

@router.get("/generate-sample-data")
async def generate_sample_orders(
    count: int = 5,
    db: Session = Depends(get_db)
):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    """
    try:
        if count > 20:
            raise HTTPException(status_code=400, detail="–ú–∞–∫—Å–∏–º—É–º 20 –∑–∞–∫–∞–∑–æ–≤ –∑–∞ —Ä–∞–∑")
        
        created_orders = []
        
        for i in range(count):
            # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
            if i > 0:
                await asyncio.sleep(0.1)
            
            result = await create_random_test_order(
                customer_name=f"–î–µ–º–æ –∫–ª–∏–µ–Ω—Ç {i+1}",
                customer_phone=f"+37529{random.randint(1000000, 9999999)}",
                items_count=random.randint(1, 4),
                db=db
            )
            
            created_orders.append(result)
        
        return {
            "success": True,
            "message": f"–°–æ–∑–¥–∞–Ω–æ {count} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤",
            "orders": created_orders
        }
        
    except HTTPException:
        raise
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

@router.get("/statistics")
async def get_test_orders_statistics(db: Session = Depends(get_db)):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç–µ—Å—Ç–æ–≤—ã–º –∑–∞–∫–∞–∑–∞–º
    """
    try:
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã (–ø–æ –ø—Ä–∏–º–µ—á–∞–Ω–∏—è–º)
        test_orders = db.query(Order).filter(
            Order.notes.like("%—Ç–µ—Å—Ç–æ–≤—ã–π%") | Order.notes.like("%–¢–µ—Å—Ç–æ–≤—ã–π%")
        ).all()
        
        total_orders = len(test_orders)
        total_amount = sum(order.total_amount for order in test_orders)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
        status_stats = {}
        for order in test_orders:
            status_stats[order.status] = status_stats.get(order.status, 0) + 1
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã
        recent_orders = db.query(Order).filter(
            Order.notes.like("%—Ç–µ—Å—Ç–æ–≤—ã–π%") | Order.notes.like("%–¢–µ—Å—Ç–æ–≤—ã–π%")
        ).order_by(Order.created_at.desc()).limit(5).all()
        
        return {
            "total_test_orders": total_orders,
            "total_amount": total_amount,
            "status_distribution": status_stats,
            "recent_orders": [
                {
                    "id": order.id,
                    "customer_name": order.customer_name,
                    "total_amount": order.total_amount,
                    "status": order.status,
                    "created_at": order.created_at.isoformat()
                }
                for order in recent_orders
            ]
        }
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")