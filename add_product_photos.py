#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–æ–≤
"""
import os
import sys

def create_migration_script():
    """–°–æ–∑–¥–∞–µ—Ç SQL –º–∏–≥—Ä–∞—Ü–∏—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—è photo_url"""
    migration_sql = """
-- –ú–∏–≥—Ä–∞—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—è photo_url –≤ —Ç–∞–±–ª–∏—Ü—É products
ALTER TABLE products ADD COLUMN IF NOT EXISTS photo_url VARCHAR(500);
ALTER TABLE products ADD COLUMN IF NOT EXISTS photo_alt VARCHAR(200);
ALTER TABLE products ADD COLUMN IF NOT EXISTS created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP;
ALTER TABLE products ADD COLUMN IF NOT EXISTS updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP;

-- –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
CREATE INDEX IF NOT EXISTS idx_products_photo_url ON products(photo_url);

-- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–æ–≤–∞—Ä–æ–≤ —Å placeholder –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
UPDATE products SET 
    photo_url = '/static/images/placeholder-product.jpg',
    photo_alt = '–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞'
WHERE photo_url IS NULL;
"""
    
    with open('migration_add_photos.sql', 'w', encoding='utf-8') as f:
        f.write(migration_sql)
    
    print("‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –º–∏–≥—Ä–∞—Ü–∏–∏: migration_add_photos.sql")

def create_upload_service():
    """–°–æ–∑–¥–∞–µ—Ç —Å–µ—Ä–≤–∏—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    upload_service = '''"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤
"""
import os
import uuid
import shutil
from typing import Optional, Tuple
from fastapi import UploadFile, HTTPException
from PIL import Image
import logging

logger = logging.getLogger(__name__)

class ImageUploadService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Ç–æ–≤–∞—Ä–æ–≤"""
    
    def __init__(self, upload_dir: str = "uploads/products"):
        self.upload_dir = upload_dir
        self.allowed_extensions = {'.jpg', '.jpeg', '.png', '.webp'}
        self.max_size = (800, 600)  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        self.thumbnail_size = (200, 150)  # –†–∞–∑–º–µ—Ä –º–∏–Ω–∏–∞—Ç—é—Ä—ã
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        os.makedirs(self.upload_dir, exist_ok=True)
        os.makedirs(f"{self.upload_dir}/thumbnails", exist_ok=True)
    
    async def upload_product_image(
        self, 
        file: UploadFile, 
        product_id: int
    ) -> Tuple[str, str]:
        """
        –ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        
        Args:
            file: –ó–∞–≥—Ä—É–∂–∞–µ–º—ã–π —Ñ–∞–π–ª
            product_id: ID —Ç–æ–≤–∞—Ä–∞
            
        Returns:
            Tuple[photo_url, thumbnail_url]
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            file_extension = os.path.splitext(file.filename)[1].lower()
            if file_extension not in self.allowed_extensions:
                raise HTTPException(
                    status_code=400, 
                    detail=f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã: {', '.join(self.allowed_extensions)}"
                )
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            file_id = str(uuid.uuid4())
            filename = f"product_{product_id}_{file_id}{file_extension}"
            thumbnail_filename = f"product_{product_id}_{file_id}_thumb{file_extension}"
            
            # –ü—É—Ç–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            file_path = os.path.join(self.upload_dir, filename)
            thumbnail_path = os.path.join(self.upload_dir, "thumbnails", thumbnail_filename)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            with open(file_path, "wb") as buffer:
                shutil.copyfileobj(file.file, buffer)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            await self._process_image(file_path, thumbnail_path)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º URL –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º
            photo_url = f"/static/uploads/products/{filename}"
            thumbnail_url = f"/static/uploads/products/thumbnails/{thumbnail_filename}"
            
            logger.info(f"Image uploaded for product {product_id}: {photo_url}")
            
            return photo_url, thumbnail_url
            
        except Exception as e:
            logger.error(f"Error uploading image for product {product_id}: {e}")
            raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
    
    async def _process_image(self, image_path: str, thumbnail_path: str):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: –∏–∑–º–µ–Ω—è–µ—Ç —Ä–∞–∑–º–µ—Ä –∏ —Å–æ–∑–¥–∞–µ—Ç –º–∏–Ω–∏–∞—Ç—é—Ä—É
        
        Args:
            image_path: –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            thumbnail_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∏–Ω–∏–∞—Ç—é—Ä—ã
        """
        try:
            with Image.open(image_path) as img:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if img.mode in ('RGBA', 'LA', 'P'):
                    img = img.convert('RGB')
                
                # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                img.thumbnail(self.max_size, Image.Resampling.LANCZOS)
                img.save(image_path, 'JPEG', quality=85, optimize=True)
                
                # –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–∞—Ç—é—Ä—É
                with Image.open(image_path) as thumb_img:
                    thumb_img.thumbnail(self.thumbnail_size, Image.Resampling.LANCZOS)
                    thumb_img.save(thumbnail_path, 'JPEG', quality=80, optimize=True)
                    
        except Exception as e:
            logger.error(f"Error processing image {image_path}: {e}")
            raise
    
    def delete_product_image(self, photo_url: str) -> bool:
        """
        –£–¥–∞–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        
        Args:
            photo_url: URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            
        Returns:
            True –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ
        """
        try:
            if not photo_url or photo_url.startswith('/static/uploads/products/'):
                return False
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ URL
            filename = os.path.basename(photo_url)
            file_path = os.path.join(self.upload_dir, filename)
            
            # –£–¥–∞–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            if os.path.exists(file_path):
                os.remove(file_path)
            
            # –£–¥–∞–ª—è–µ–º –º–∏–Ω–∏–∞—Ç—é—Ä—É
            thumbnail_path = os.path.join(self.upload_dir, "thumbnails", filename)
            if os.path.exists(thumbnail_path):
                os.remove(thumbnail_path)
            
            logger.info(f"Deleted image: {photo_url}")
            return True
            
        except Exception as e:
            logger.error(f"Error deleting image {photo_url}: {e}")
            return False
    
    def get_placeholder_image(self) -> str:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL placeholder –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        
        Returns:
            URL placeholder –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        """
        return "/static/images/placeholder-product.jpg"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
image_upload_service = ImageUploadService()
'''
    
    with open('image_upload_service.py', 'w', encoding='utf-8') as f:
        f.write(upload_service)
    
    print("‚úÖ –°–æ–∑–¥–∞–Ω —Å–µ—Ä–≤–∏—Å –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: image_upload_service.py")

def create_placeholder_image():
    """–°–æ–∑–¥–∞–µ—Ç placeholder –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"""
    placeholder_html = '''<!DOCTYPE html>
<html>
<head>
    <title>Placeholder Image Generator</title>
</head>
<body>
    <h1>Placeholder Image Generator</h1>
    <p>–≠—Ç–æ—Ç —Ñ–∞–π–ª –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è placeholder –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞.</p>
    <p>–†–∞–∑–º–µ—Ä: 400x300px</p>
    <p>–¶–≤–µ—Ç: #f3f4f6</p>
    <p>–¢–µ–∫—Å—Ç: "–ù–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"</p>
</body>
</html>'''
    
    with open('placeholder_image.html', 'w', encoding='utf-8') as f:
        f.write(placeholder_html)
    
    print("‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –¥–ª—è placeholder –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: placeholder_image.html")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–æ–≤...")
    
    create_migration_script()
    create_upload_service()
    create_placeholder_image()
    
    print("\n‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã —Å–æ–∑–¥–∞–Ω—ã!")
    print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä")
    print("2. –í—ã–ø–æ–ª–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    print("3. –û–±–Ω–æ–≤–∏—Ç—å –º–æ–¥–µ–ª—å Product")
    print("4. –î–æ–±–∞–≤–∏—Ç—å API endpoints –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ—Ç–æ")
    print("5. –û–±–Ω–æ–≤–∏—Ç—å —à–∞–±–ª–æ–Ω—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–æ—Ç–æ")

if __name__ == "__main__":
    main()